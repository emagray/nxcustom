@echo off

:: Editing this file is generally not necessary.

:: Make sure you are familiar with all of the capabilities provided
:: via the configuration files before determining whether or not
:: custom scripting is needed for your purposes.

:: If you do determine custom scripting is needed, please familiarize
:: yourself with the hooks already made available to you.
:: Hooks are a way to run your own scripts at various points during
:: the execution of this script, without needing to modify this script.

:: This script may change significantly from one version of NXcustom
:: to the next. Modify at your own risk and inconvenience.

:: ------------------------------ DO NOT EDIT THIS FILE ------------------------------ ::
:: ------------------------ UNLESS YOU KNOW WHAT YOU ARE DOING ----------------------- ::
:: ----------------------- OR ARE WILLING TO BREAK STUFF TRYING ---------------------- ::

:: Allow calling functions externally
set __a=%*
set __a=%__a:~0,1%
if "%__a%" == ":" (
	set __a=
	call %*
	exit /b
)
set __a=

:: Preparation
call :set_constants
call :set_default_values
call :set_locations
call :parse_and_eval_conf START
call :clear_log
call :validate_NXCUSTOM_USER_OVERRIDE_ARGS

:: Set window title
title NXcustom %NXCUSTOM_SCRIPT_VERSION%

:: Determine which software versions are installed and registered
set NXCUSTOM_INSTALLED_S3D_VERSIONS=
set NXCUSTOM_INSTALLED_SE_VERSION=
set NXCUSTOM_INSTALLED_TC_VERSION=
setlocal EnableDelayedExpansion
for /f "usebackq tokens=* delims=" %%a in (`reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Siemens" 2^> nul`) do (
	set __a=%%~na
	if "!__a:~0,13!" == "Simcenter 3D " (
		if not defined NXCUSTOM_INSTALLED_S3D_VERSIONS (
			set NXCUSTOM_INSTALLED_S3D_VERSIONS=!__a:~-4!
		) else (
			set NXCUSTOM_INSTALLED_S3D_VERSIONS=!NXCUSTOM_INSTALLED_S3D_VERSIONS! !__a:~-4!
		)
	)
	if "!__a!" == "Solid Edge" (
		for /f "usebackq tokens=*" %%b in (`reg query "%%a" 2^> nul`) do (
			set __b=%%~nb
			if "!__b:~0,7!" == "Version" (
				set NXCUSTOM_INSTALLED_SE_VERSION=!__b:~-3!
			)
		)
	)
	if "!__a!" == "Teamcenter" (
		for /f "usebackq tokens=*" %%b in (`reg query "%%a" 2^> nul`) do (
			set __b=%%~nb
			set NXCUSTOM_INSTALLED_TC_VERSION=!__b:~0,2!
		)
	)
)
endlocal & (
	set NXCUSTOM_INSTALLED_S3D_VERSIONS=%NXCUSTOM_INSTALLED_S3D_VERSIONS%
	set NXCUSTOM_INSTALLED_SE_VERSION=%NXCUSTOM_INSTALLED_SE_VERSION%
	set NXCUSTOM_INSTALLED_TC_VERSION=%NXCUSTOM_INSTALLED_TC_VERSION%
)

:: Set NX paths
call :set_nx_paths

:: Determine NXcustom libraries available
set NXCUSTOM_LIBRARY_VERSIONS=
setlocal EnableDelayedExpansion
for /f "usebackq" %%a in (`dir /b "%NXCUSTOM_DIR%\NX????library*"`) do (
	set __a=%%a
	set __v=!__a:~2,4!
	if not defined NXCUSTOM_LIBRARY_VERSIONS (
		set NXCUSTOM_LIBRARY_VERSIONS=!__v!
	) else (
		echo !NXCUSTOM_LIBRARY_VERSIONS! | findstr /C:"!__v!">nul || (
			set NXCUSTOM_LIBRARY_VERSIONS=!NXCUSTOM_LIBRARY_VERSIONS! !__v!
		)
	)
	if "!__a:~13,1!" == "_" (
		if not defined NXCUSTOM_NAMED_LIBRARIES (
			set NXCUSTOM_NAMED_LIBRARIES=!__v!-!__a:~14!
		) else (	
			set NXCUSTOM_NAMED_LIBRARIES=!NXCUSTOM_NAMED_LIBRARIES! !__v!-!__a:~14!
		)
	)
)
endlocal & (
	set NXCUSTOM_LIBRARY_VERSIONS=%NXCUSTOM_LIBRARY_VERSIONS%
	set NXCUSTOM_NAMED_LIBRARIES=%NXCUSTOM_NAMED_LIBRARIES%
)
if "%NXCUSTOM_LIBRARY_VERSIONS%" == "" (
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "No NX libraries found!"
	call :report new_line
	call :report "Please copy NXlibrary_template folder from NXstartup\Configuration_Templates"
	call :report "to NXcustom and rename to NXxxxxlibrary where 'xxxx' is the version number."
	call :red_exit
)

:: Determine valid versions for NXcustom and set default to highest valid version
:: These are the installed NX versions which have an NXcustom library in NXCUSTOM_DIR
call :set_valid_application_versions

:: Argument handling
set NXCUSTOM_START_ARGS_ESCAPED=%*
set NXCUSTOM_START_ARGS_ESCAPED=%NXCUSTOM_START_ARGS_ESCAPED:^%=^^^%%
call :parse_args %*
call :eval_arg_vars

:: Validation
set abort=false
call :validate_variable NXCUSTOM_APPLICATION_NAME
if /i "%NXCUSTOM_APPLICATION_NAME%" == "NX" (
	set NXCUSTOM_VALID_PACKAGE_NAME=%NXCUSTOM_VALID_PACKAGE_NAME_NX%
	call :validate_variable NXCUSTOM_PACKAGE_NAME
) else if /i "%NXCUSTOM_APPLICATION_NAME%" == "S3D" (
	set NXCUSTOM_VALID_PACKAGE_NAME=%NXCUSTOM_VALID_PACKAGE_NAME_S3D%
	call :validate_variable NXCUSTOM_PACKAGE_NAME
)
call :validate_variable NXCUSTOM_SESSIONS
call :validate_variable NXCUSTOM_TEAMCENTER_ACTIVE

call :validate_NXCUSTOM_APPLICATION_VERSION
call :validate_UGII_ROUTING_KIT_UNITS
call :validate_NXCUSTOM_LIBNAME
call :validate_MKE_VERSION
if "%abort%" == "true" (call :red_exit)
set abort=

:: UGII_BASE_DIR
call :set_UGII_BASE_DIR

:: Set SE_DIR if Solid Edge is installed
if defined NXCUSTOM_INSTALLED_SE_VERSION (
	set SE_DIR=
	for /f "usebackq tokens=1,2,*" %%a in (`reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Siemens\Solid Edge\Version %NXCUSTOM_INSTALLED_SE_VERSION%\CurrentVersion" 2^> nul`) do (
		if "%%a" equ "InstallPath" set SE_DIR=%%c
	)
	if not defined SE_DIR (
		set NXCUSTOM_REPORT_VARS=TRUE
		call :report "No Solid Edge InstallPath key found in registry for Version %NXCUSTOM_INSTALLED_SE_VERSION%"
		call :red_exit
	)
)

:: Set PATH
set PATH=%UGII_BASE_DIR%\NXBIN;%PATH%

:: Set UGII_TEMP_DIR
set UGII_TEMP_DIR=%TEMP%

:: Set NXcustom common library
:: This folder should only contain version independent data
set NXCUSTOM_COMMON_LIB=%NXCUSTOM_DIR%\NXcommonlibrary

:: Set NXcustom version-specific library
set NXCUSTOM_LIB=%NXCUSTOM_DIR%\NX%NXCUSTOM_APPLICATION_VERSION%library
if defined NXCUSTOM_LIBNAME (
	set NXCUSTOM_LIB=%NXCUSTOM_LIB%_%NXCUSTOM_LIBNAME%
)
if not exist "%NXCUSTOM_LIB%" (
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "The following path does not exist:"
	call :report "%NXCUSTOM_LIB%"
	call :red_exit
)
if exist "%NXCUSTOM_LIB%\NX_lib.version" (
	for /f "usebackq tokens=*" %%a in ("%NXCUSTOM_LIB%\NX_lib.version") do (
		set NXCUSTOM_LIB_VERSION=%%a
	)
)

:: More configuration
call :parse_and_eval_conf LIB
call :eval_arg_vars
call :validate_NXCUSTOM_APPLICATION_VERSION

:: Open part argument handling
setlocal EnableDelayedExpansion
set abort=false
if defined NXCUSTOM_PART_FILE (
	call :validate_NXCUSTOM_PART_FILE
	set NXCUSTOM_TEAMCENTER_ACTIVE=FALSE
	if /i "!NXCUSTOM_SESSIONS!" == "SINGLE" (
		if not defined NXCUSTOM_PASSED_ARGUMENTS (
			set NXCUSTOM_PASSED_ARGUMENTS=-use_file_dir "!NXCUSTOM_PART_FILE!"
		) else (
			set NXCUSTOM_PASSED_ARGUMENTS=-use_file_dir "!NXCUSTOM_PART_FILE!" !NXCUSTOM_PASSED_ARGUMENTS!
		)
	)
	if /i "!NXCUSTOM_SESSIONS!" == "MULTIPLE" (
		if not defined NXCUSTOM_PASSED_ARGUMENTS (
			set NXCUSTOM_PASSED_ARGUMENTS=-retrieve:"!NXCUSTOM_PART_FILE!"
		) else (
			set NXCUSTOM_PASSED_ARGUMENTS=-retrieve:"!NXCUSTOM_PART_FILE!" !NXCUSTOM_PASSED_ARGUMENTS!
		)
	)
)
if defined NXCUSTOM_NXTCXML_FILE (
	call :validate_NXCUSTOM_NXTCXML_FILE
	set NXCUSTOM_TEAMCENTER_ACTIVE=TRUE
	set NXCUSTOM_START_FROM_AW_OR_RAC=TRUE
	set NXCUSTOM_SESSIONS=SINGLE
	if not defined NXCUSTOM_PASSED_ARGUMENTS (
		set NXCUSTOM_PASSED_ARGUMENTS=-use_file_dir "!NXCUSTOM_NXTCXML_FILE!" -passthrough -application_id=AW -user_action_flags=0x0 -opts -http_url_file="!NXCUSTOM_NXTCXML_FILE!"
	) else (
		set NXCUSTOM_PASSED_ARGUMENTS=-use_file_dir "!NXCUSTOM_NXTCXML_FILE!" -passthrough -application_id=AW -user_action_flags=0x0 -opts -http_url_file="!NXCUSTOM_NXTCXML_FILE!" !NXCUSTOM_PASSED_ARGUMENTS!
	)
)
if defined NXCUSTOM_ARGS_FROM_RAC (
	set NTIER_ARG=!NXCUSTOM_ARGS_FROM_RAC:~-6!
	set NXCUSTOM_TEAMCENTER_ACTIVE=TRUE
	set NXCUSTOM_START_FROM_AW_OR_RAC=TRUE
	if not defined NXCUSTOM_PASSED_ARGUMENTS (
		set NXCUSTOM_PASSED_ARGUMENTS=!NXCUSTOM_ARGS_FROM_RAC!
	) else (
		set NXCUSTOM_PASSED_ARGUMENTS=!NXCUSTOM_ARGS_FROM_RAC! !NXCUSTOM_PASSED_ARGUMENTS!
	)
)
if "!abort!" == "true" (call :red_exit)
endlocal & (
	set NXCUSTOM_TEAMCENTER_ACTIVE=%NXCUSTOM_TEAMCENTER_ACTIVE%
	set NXCUSTOM_SESSIONS=%NXCUSTOM_SESSIONS%
	set NXCUSTOM_START_FROM_AW_OR_RAC=%NXCUSTOM_START_FROM_AW_OR_RAC%
	set NTIER_ARG=%NTIER_ARG%
	set NXCUSTOM_PASSED_ARGUMENTS=%NXCUSTOM_PASSED_ARGUMENTS%
)

:: TCIN
if "%NXCUSTOM_START_FROM_AW_OR_RAC%" == "TRUE" (
	set NXCUSTOM_REPORT_VARS=FALSE
	set NXCUSTOM_TEAMCENTER_ENV=
) else if /i "%NXCUSTOM_TEAMCENTER_ACTIVE%" == "TRUE" (
	call :parse_and_eval_conf TC
	if not defined FMS_HOME (
		set FMS_HOME=%UGII_BASE_DIR%\UGMANAGER\tccs
	)
	call :check_tcin_vars_set
)

:: Hook after_conf_eval
if exist "%NXCUSTOM_CONFIG_DIR%\hooks\after_conf_eval\" (
	for /f "usebackq tokens=*" %%a in (`dir /b "%NXCUSTOM_CONFIG_DIR%\hooks\after_conf_eval\"`) do (
		call "%NXCUSTOM_CONFIG_DIR%\hooks\after_conf_eval\%%a"
	)
)

:: Set custom environment variable file
setlocal EnableDelayedExpansion
if defined UGII_ENV_FILE (
	set __a=%NXCUSTOM_REPORT_VARS%
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "UGII_ENV_FILE is set to:"
	call :report "%UGII_ENV_FILE%"
	call :report new_line
	call :report "Continuing will override it with:"
	call :report "%NXCUSTOM_LIB%\NX_env.dat"
	call :yellow_pause
	call :black_continue
	set NXCUSTOM_REPORT_VARS=!__a!
	set __a=
)
endlocal & (
	set NXCUSTOM_REPORT_VARS=%NXCUSTOM_REPORT_VARS%
)
set UGII_ENV_FILE=%NXCUSTOM_LIB%\NX_env.dat

:: Set custom directory file
setlocal EnableDelayedExpansion
if defined UGII_CUSTOM_DIRECTORY_FILE (
	set __a=%NXCUSTOM_REPORT_VARS%
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "UGII_CUSTOM_DIRECTORY_FILE is set to:"
	call :report "%UGII_CUSTOM_DIRECTORY_FILE%"
	call :report new_line
	call :report "Continuing will override it with:"
	call :report "%NXCUSTOM_LIB%\custom_dirs.dat"
	call :yellow_pause
	call :black_continue
	set NXCUSTOM_REPORT_VARS=!__a!
)
endlocal & (
	set NXCUSTOM_REPORT_VARS=%NXCUSTOM_REPORT_VARS%
)
set UGII_CUSTOM_DIRECTORY_FILE=%NXCUSTOM_LIB%\custom_dirs.dat

:: Set customer defaults location
set NXCUSTOM_CUSTOMER_DEFAULTS_DIR=%NXCUSTOM_LIB%\CustomerDefaults
if /i "%NXCUSTOM_MANAGED_CUSTOMER_DEFAULTS%" == "TRUE" if /i "%NXCUSTOM_TEAMCENTER_ACTIVE%" == "TRUE" (
	set NXCUSTOM_CUSTOMER_DEFAULTS_DIR=%NXCUSTOM_CUSTOMER_DEFAULTS_DIR%\TC
)

:: Set site directory
set UGII_SITE_DIR=%NXCUSTOM_CUSTOMER_DEFAULTS_DIR%\Site

:: Groups
set NXCUSTOM_VALID_GROUPS=
setlocal EnableDelayedExpansion
if exist "%NXCUSTOM_CUSTOMER_DEFAULTS_DIR%\Groups\" (
	for /f "usebackq" %%a in (`dir /b "%NXCUSTOM_CUSTOMER_DEFAULTS_DIR%\Groups\"`) do (
		if not defined NXCUSTOM_VALID_GROUPS (
			set NXCUSTOM_VALID_GROUPS=%%a
		) else (
			set NXCUSTOM_VALID_GROUPS=!NXCUSTOM_VALID_GROUPS! %%a
		)
	)
)
endlocal & (
	set NXCUSTOM_VALID_GROUPS=%NXCUSTOM_VALID_GROUPS%
)
set UGII_GROUP_DIR=
if defined NXCUSTOM_GROUP (
	call :validate_NXCUSTOM_GROUP
	set UGII_GROUP_DIR=%NXCUSTOM_CUSTOMER_DEFAULTS_DIR%\Groups\%NXCUSTOM_GROUP%
)

:: Define title based on package
call :set_package_title

:: Define location of user settings folder
if not defined NXCUSTOM_USER_SETTINGS_LOCATION (
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "The NXCUSTOM_USER_SETTINGS_LOCATION variable is not set!"
	call :report "Please set the variable in the NXstart.conf file."
	call :red_exit
)
set TMP_USER_DIR=%NXCUSTOM_USER_SETTINGS_LOCATION%
set UGII_USER_PROFILE_DIR=%NXCUSTOM_USER_SETTINGS_LOCATION%\%USERNAME%\%NXCUSTOM_APPLICATION_VERSION%
if "%NXCUSTOM_USER_SETTINGS_LOCATION%" == "1" (
	call :set_user_profile_dir "%NXCUSTOM_CUSTOMER_DEFAULTS_DIR%\Users" "%NXCUSTOM_CUSTOMER_DEFAULTS_DIR%\Users\%USERNAME%"
) else if "%NXCUSTOM_USER_SETTINGS_LOCATION%" == "2" (
	call :set_user_profile_dir "%HOMEDRIVE%%HOMEPATH%" "%HOMEDRIVE%%HOMEPATH%\NXcustom\%NXCUSTOM_PACKAGE_TITLE%%NXCUSTOM_APPLICATION_VERSION%"
) else if "%NXCUSTOM_USER_SETTINGS_LOCATION%" == "3" (
	call :set_user_profile_dir "%APPDATA%" "%APPDATA%\NXcustom\%NXCUSTOM_PACKAGE_TITLE%%NXCUSTOM_APPLICATION_VERSION%"
) else if "%NXCUSTOM_USER_SETTINGS_LOCATION%" == "4" (
	call :set_user_profile_dir "%LOCALAPPDATA%" "%LOCALAPPDATA%\Siemens\%NXCUSTOM_PACKAGE_TITLE%%NXCUSTOM_APPLICATION_VERSION%"
)
set TMP_USER_DIR=

:: Set assembly load options
if /i "%NXCUSTOM_LOAD_OPTIONS_IN_USER_DIR%" == "TRUE" (
	set UGII_LOAD_OPTIONS=%UGII_USER_PROFILE_DIR%\load_options.def
)

:: NX title bar
set NXCUSTOM_TITLE_VERSION=
set __t=%NXCUSTOM_PACKAGE_TITLE%
if exist "%UGII_USER_PROFILE_DIR%\startup\NX_title.men" del "%UGII_USER_PROFILE_DIR%\startup\NX_title.men"
for /f "usebackq tokens=1,2" %%a in (`"%UGII_BASE_DIR%\NXBIN\env_print" -n`) do (
	set NXCUSTOM_TITLE_VERSION=%%b
)
if /i "%NXCUSTOM_VERSION_IN_TITLE%" == "TRUE" (set __t=%__t% %NXCUSTOM_TITLE_VERSION%)
if defined NXCUSTOM_LIBNAME if "%NXCUSTOM_LIBNAME_IN_TITLE%" == "TRUE" (set __t=%__t% - %NXCUSTOM_LIBNAME%)
if defined NXCUSTOM_TITLE (set __t=%__t% - %NXCUSTOM_TITLE%)
if "%__t%" neq "%NXCUSTOM_PACKAGE_TITLE%" (
	if not exist "%UGII_USER_PROFILE_DIR%\startup" (mkdir "%UGII_USER_PROFILE_DIR%\startup")
	echo VERSION 120>"%UGII_USER_PROFILE_DIR%\startup\NX_title.men"
	echo EDIT UG_GATEWAY_MAIN_MENUBAR>>"%UGII_USER_PROFILE_DIR%\startup\NX_title.men"
	echo TITLE %__t%>>"%UGII_USER_PROFILE_DIR%\startup\NX_title.men"
)
set __t=

:: Set start in directory
call :validate_START_DIR "%START_DIR%"
if "%valid%" == "true" (goto :end_set_start_dir)
call :validate_START_DIR "%HOMEDRIVE%%HOMEPATH%"
if "%valid%" == "true" (goto :end_set_start_dir)
call :validate_START_DIR "%TC_TMP_DIR%"
if "%valid%" == "true" (goto :end_set_start_dir)
call :validate_START_DIR "%UGII_TMP_DIR%"
if "%valid%" == "true" (goto :end_set_start_dir)
call :validate_START_DIR "%TEMP%"
if "%valid%" == "true" (goto :end_set_start_dir)
if "%valid%" == "false" (
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "No valid START_DIR could be found!"
	call :red_exit	
)
:end_set_start_dir
set valid=

:: Set variables for reporting
call :to_upper "NXCUSTOM_APPLICATION_NAME" "NXCUSTOM_APPLICATION_NAME_UPPER"
call :to_upper "NXCUSTOM_PACKAGE_NAME" "NXCUSTOM_PACKAGE_NAME_UPPER"
call :to_upper "UGII_ROUTING_KIT_UNITS" "UGII_ROUTING_KIT_UNITS_UPPER"
if not defined UGII_SITE_DIR (
	for /f "usebackq tokens=*" %%a in (`"%UGII_BASE_DIR%\NXBIN\env_print" UGII_SITE_DIR`) do (set UGII_SITE_DIR=%%a)
)
if not defined UGII_GROUP_DIR (
	for /f "usebackq tokens=*" %%a in (`"%UGII_BASE_DIR%\NXBIN\env_print" UGII_GROUP_DIR`) do (set UGII_GROUP_DIR=%%a)
)

:: Change directory
cd /d %START_DIR% 2> nul

:: Check for old customer script
if exist "%NXCUSTOM_START_DIR%\NXstart_customer.bat" (
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "NXstart_customer.bat found in NXstartup."
	call :report "Please move the script to Configuration\hooks\after_report_vars\"
	call :report "You may rename the script to any name."
	call :red_exit
)

:: Passed args replace characters
if defined NXCUSTOM_PASSED_ARGUMENTS (
	set NXCUSTOM_PASSED_ARGUMENTS=%NXCUSTOM_PASSED_ARGUMENTS:#ASCII40=(%
	set NXCUSTOM_PASSED_ARGUMENTS=%NXCUSTOM_PASSED_ARGUMENTS:#ASCII41=)%
)

:: Clear screen
cls

:: Report variables
if defined NXCUSTOM_USING_NX_PATHS_CONF set NXCUSTOM_USING_CONF=true
if defined NXCUSTOM_USING_START_CONF set NXCUSTOM_USING_CONF=true
if defined NXCUSTOM_USING_LIB_CONF set NXCUSTOM_USING_CONF=true
if defined NXCUSTOM_USING_TC_CONF set NXCUSTOM_USING_CONF=true
call :green_success
call :report "****************************************** NXCUSTOM ******************************************"
if defined NXCUSTOM_APPLICATION_VERSION	call :report "NX Compatible Version       = %NXCUSTOM_APPLICATION_VERSION%"
if defined NXCUSTOM_NX_DOT_VERSION		call :report "NX Full Version             = %NXCUSTOM_NX_DOT_VERSION%"
										call :report new_line
if defined NXCUSTOM_USING_NX_PATHS_CONF	call :report "NXCUSTOM_NX_PATHS_CONF      = %NXCUSTOM_NX_PATHS_CONF%"
if defined NXCUSTOM_USING_START_CONF	call :report "NXCUSTOM_START_CONF         = %NXCUSTOM_START_CONF%"
if defined NXCUSTOM_USING_LIB_CONF		call :report "NXCUSTOM_LIB_CONF           = %NXCUSTOM_LIB_CONF%"
if defined NXCUSTOM_USING_TC_CONF		call :report "NXCUSTOM_TC_CONF            = %NXCUSTOM_TC_CONF%"
if defined NXCUSTOM_USING_CONF			call :report new_line
if defined NXCUSTOM_APPLICATION_NAME	call :report "NXCUSTOM_APPLICATION_NAME   = %NXCUSTOM_APPLICATION_NAME_UPPER%"
if defined NXCUSTOM_PACKAGE_NAME		call :report "NXCUSTOM_PACKAGE_NAME       = %NXCUSTOM_PACKAGE_NAME_UPPER%"
if defined START_DIR					call :report "START_DIR                   = %START_DIR%"
if defined SALT_LICENSE_SERVER			call :report "SALT_LICENSE_SERVER         = %SALT_LICENSE_SERVER%"
if defined SPLM_LICENSE_SERVER			call :report "SPLM_LICENSE_SERVER         = %SPLM_LICENSE_SERVER%"
if defined CDLMD_LICENSE_FILE			call :report "CDLMD_LICENSE_FILE          = %CDLMD_LICENSE_FILE%"
if defined NXCUSTOM_DIR					call :report "NXCUSTOM_DIR                = %NXCUSTOM_DIR%"
if defined NXCUSTOM_LIB					call :report "NXCUSTOM_LIB                = %NXCUSTOM_LIB%"
if defined NXCUSTOM_COMMON_LIB			call :report "NXCUSTOM_COMMON_LIB         = %NXCUSTOM_COMMON_LIB%"
if defined UGII_USER_PROFILE_DIR		call :report "UGII_USER_PROFILE_DIR       = %UGII_USER_PROFILE_DIR%"
if defined UGII_ENV_FILE				call :report "UGII_ENV_FILE               = %UGII_ENV_FILE%"
if defined UGII_BASE_DIR				call :report "UGII_BASE_DIR               = %UGII_BASE_DIR%"
if defined UGII_SITE_DIR				call :report "UGII_SITE_DIR               = %UGII_SITE_DIR%"
if defined UGII_GROUP_DIR				call :report "UGII_GROUP_DIR              = %UGII_GROUP_DIR%"
if defined UGII_ROUTING_KIT_UNITS		call :report "UGII_ROUTING_KIT_UNITS      = %UGII_ROUTING_KIT_UNITS_UPPER%"
if defined NTIER_ARG					call :report "NTIER_ARG                   = %NTIER_ARG%"
if defined TC_DATA						call :report "TC_DATA                     = %TC_DATA%"
if defined SE_DIR						call :report "SE_DIR                      = %SE_DIR%"
										call :report new_line
if defined NXCUSTOM_SCRIPT_VERSION		call :report "NXcustom Script Version     = %NXCUSTOM_SCRIPT_VERSION%"
if defined NXCUSTOM_LIB_VERSION			call :report "NXcustom Library Version    = %NXCUSTOM_LIB_VERSION%"
call :report "**********************************************************************************************"

:: Hook after_report_vars
if exist "%NXCUSTOM_CONFIG_DIR%\hooks\after_report_vars\" (
	for /f "usebackq tokens=*" %%a in (`dir /b "%NXCUSTOM_CONFIG_DIR%\hooks\after_report_vars\"`) do (
		call "%NXCUSTOM_CONFIG_DIR%\hooks\after_report_vars\%%a"
	)
)

:: Remove variables to keep NX log clean
call :clean_vars

:: Show log
if "%NXCUSTOM_REPORT_VARS%" == "SHOW_LOG" (
	start "" notepad "%NXCUSTOM_LOG_FILE%"
)

:: Start the correct application and package
if /i "%NXCUSTOM_APPLICATION_NAME%" neq "NONE" (
	if /i "%NXCUSTOM_APPLICATION_NAME%" == "NX" (
		if /i "%NXCUSTOM_SESSIONS%" == "MULTIPLE" (
			if /i "%NXCUSTOM_TEAMCENTER_ACTIVE%" == "TRUE" (
				start "" "%UGII_BASE_DIR%\nxbin\ugraf" -%NXCUSTOM_PACKAGE_NAME% -pim=yes %NXCUSTOM_PASSED_ARGUMENTS%
			) else (
				start "" "%UGII_BASE_DIR%\nxbin\ugraf" -%NXCUSTOM_PACKAGE_NAME% %NXCUSTOM_PASSED_ARGUMENTS%
			)
		) else if /i "%NXCUSTOM_SESSIONS%" == "SINGLE" (
			if /i "%NXCUSTOM_TEAMCENTER_ACTIVE%" == "TRUE" (
				start "" "%UGII_BASE_DIR%\nxbin\ugs_router" -ugm -version=V%NXCUSTOM_APPLICATION_VERSION% %NXCUSTOM_PASSED_ARGUMENTS% -opts -%NXCUSTOM_PACKAGE_NAME%
			) else (
				start "" "%UGII_BASE_DIR%\nxbin\ugs_router" -ug -version=V%NXCUSTOM_APPLICATION_VERSION% %NXCUSTOM_PASSED_ARGUMENTS% -opts -%NXCUSTOM_PACKAGE_NAME%
			)
		)
	) else if /i "%NXCUSTOM_APPLICATION_NAME%" == "S3D" (
		if /i "%NXCUSTOM_SESSIONS%" == "MULTIPLE" (
			if /i "%NXCUSTOM_TEAMCENTER_ACTIVE%" == "TRUE" (
				start "" "%UGII_BASE_DIR%\nxbin\ugraf" -%NXCUSTOM_PACKAGE_NAME% -pim=yes %NXCUSTOM_PASSED_ARGUMENTS%
			) else (
				start "" "%UGII_BASE_DIR%\nxbin\ugraf" -%NXCUSTOM_PACKAGE_NAME% %NXCUSTOM_PASSED_ARGUMENTS%
			)
		) else if /i "%NXCUSTOM_SESSIONS%" == "SINGLE" (
			if /i "%NXCUSTOM_TEAMCENTER_ACTIVE%" == "TRUE" (
				start "" "%UGII_BASE_DIR%\nxbin\ugs_router" -ugm -version=V%NXCUSTOM_APPLICATION_VERSION% %NXCUSTOM_PASSED_ARGUMENTS% -opts -%NXCUSTOM_PACKAGE_NAME%
			) else (
				start "" "%UGII_BASE_DIR%\nxbin\ugs_router" -ug -version=V%NXCUSTOM_APPLICATION_VERSION% %NXCUSTOM_PASSED_ARGUMENTS% -opts -%NXCUSTOM_PACKAGE_NAME%
			)
		)
	) else if /i "%NXCUSTOM_APPLICATION_NAME%" == "MKE" (
		start "" "%UGII_BASE_DIR%\MACH\machining_knowledge_editor\bin\MkEditor.exe"
	) else if /i "%NXCUSTOM_APPLICATION_NAME%" == "SE" (
		start "" "%SE_DIR%\Edge.exe" %NXCUSTOM_PASSED_ARGUMENTS%
	) else if /i "%NXCUSTOM_APPLICATION_NAME%" == "CMD" (
		start "" "cmd.exe"
	)
)

:: Hook after_application_start
if exist "%NXCUSTOM_CONFIG_DIR%\hooks\after_application_start\" (
	for /f "usebackq tokens=*" %%a in (`dir /b "%NXCUSTOM_CONFIG_DIR%\hooks\after_application_start\"`) do (
		call "%NXCUSTOM_CONFIG_DIR%\hooks\after_application_start\%%a"
	)
)

if /i "%NXCUSTOM_APPLICATION_NAME%" neq "NONE" if "%NXCUSTOM_REPORT_VARS%" == "TRUE" (
	timeout 60
)





:: ------------------------------- INTERNAL FUNCTIONS ------------------------------- ::
:: -------------------------- DEFINITELY DO NOT EDIT THESE -------------------------- ::

exit /b 0

:set_constants
set NXCUSTOM_SCRIPT_VERSION=2025.10.27
set NXCUSTOM_VALID_START_ARGUMENTS=/version-/v-NXCUSTOM_APPLICATION_VERSION /application-/a-NXCUSTOM_APPLICATION_NAME /package-/p-NXCUSTOM_PACKAGE_NAME /group-/g-NXCUSTOM_GROUP /units-/u-UGII_ROUTING_KIT_UNITS /sessions-/s-NXCUSTOM_SESSIONS /managed-/m-NXCUSTOM_TEAMCENTER_ACTIVE /workdir-/w-START_DIR /title-/t-NXCUSTOM_TITLE /saltlic-n/a-SALT_LICENSE_SERVER /licserver-/l-SPLM_LICENSE_SERVER /cdlmdlic-n/a-CDLMD_LICENSE_FILE /licbundle-n/a-UGII_LICENSE_BUNDLE /libname-n/a-NXCUSTOM_LIBNAME /nxaw-n/a-NXCUSTOM_NXTCXML_FILE /openfile-n/a-NXCUSTOM_PART_FILE /tcenv-n/a-NXCUSTOM_TEAMCENTER_ENV /passargs-n/a-NXCUSTOM_PASSED_ARGUMENTS
set NXCUSTOM_VALID_PACKAGE_NAME_NX=NX VIEW NXCAM MECHATRONICS SECAM LAYOUT SIMCENTER3D SIMVIEWER MOTION NX2DEDIT
set NXCUSTOM_VALID_PACKAGE_NAME_S3D=NX VIEW SIMCENTER3D SIMVIEWER
set NXCUSTOM_VALID_ROUTING_UNITS=METRIC INCH
set NXCUSTOM_VALID_APPLICATION_NAME=NX S3D MKE SE TC CMD NONE
set NXCUSTOM_VALID_SESSIONS=SINGLE MULTIPLE
set NXCUSTOM_VALID_TEAMCENTER_ACTIVE=TRUE FALSE
set NXCUSTOM_VALID_PACKAGE_TITLE="NX-PRODUCT_NAME" "VIEW-PRODUCT_NAME Viewer" "NXCAM-NX CAM" "MECHATRONICS-Mechatronics Concept Designer" "SECAM-Solid Edge CAM Pro" "LAYOUT-PRODUCT_NAME Layout" "SIMCENTER3D-Simcenter 3D" "SIMVIEWER-Simcenter 3D Results Viewer" "MOTION-PRODUCT_NAME" "NX2DEDIT-PRODUCT_NAME 2D Edit"
set NXCUSTOM_VALID_START_CONF_VARS=NXCUSTOM_APPLICATION_VERSION NXCUSTOM_APPLICATION_NAME NXCUSTOM_PACKAGE_NAME NXCUSTOM_LIBNAME NXCUSTOM_GROUP UGII_ROUTING_KIT_UNITS NXCUSTOM_SESSIONS NXCUSTOM_TEAMCENTER_ACTIVE START_DIR NXCUSTOM_TITLE SALT_LICENSE_SERVER SPLM_LICENSE_SERVER CDLMD_LICENSE_FILE UGII_LICENSE_BUNDLE NXCUSTOM_PASSED_ARGUMENTS NXCUSTOM_MANAGED_CUSTOMER_DEFAULTS NXCUSTOM_USER_SETTINGS_LOCATION NXCUSTOM_VERSION_IN_TITLE NXCUSTOM_LIBNAME_IN_TITLE NXCUSTOM_LOAD_OPTIONS_IN_USER_DIR UGII_UGDOC_BASE NXCUSTOM_REPORT_VARS NXCUSTOM_LOG_FILE NXCUSTOM_TEAMCENTER_ENV NXCUSTOM_USER_OVERRIDE_ARGS
set NXCUSTOM_VALID_LIB_CONF_VARS=NXCUSTOM_APPLICATION_NAME NXCUSTOM_PACKAGE_NAME NXCUSTOM_GROUP UGII_ROUTING_KIT_UNITS NXCUSTOM_SESSIONS NXCUSTOM_TEAMCENTER_ACTIVE START_DIR NXCUSTOM_TITLE SALT_LICENSE_SERVER SPLM_LICENSE_SERVER CDLMD_LICENSE_FILE UGII_LICENSE_BUNDLE NXCUSTOM_PASSED_ARGUMENTS NXCUSTOM_MANAGED_CUSTOMER_DEFAULTS NXCUSTOM_USER_SETTINGS_LOCATION NXCUSTOM_VERSION_IN_TITLE NXCUSTOM_LIBNAME_IN_TITLE NXCUSTOM_LOAD_OPTIONS_IN_USER_DIR UGII_UGDOC_BASE NXCUSTOM_REPORT_VARS NXCUSTOM_TEAMCENTER_ENV
set NXCUSTOM_VALID_TC_CONF_VARS=FMS_HOME FCC_CONFIG UGII_TCCS_ENV_NAME TCCS_CONFIG_HOME TC_ROOT TC_DATA UGII_UGMGR_COMMUNICATION UGII_UGMGR_HTTP_URL UGII_UGMGR_SOA_ENABLED UGII_UGMGR_USE_SOA NX_SSO_APP_ID NX_SSO_URL ENABLE_SSO UGII_CUSTOMER_ENV_NAME TEAMCENTER_SSL_CERT_FILE
set NXCUSTOM_ALWAYS_ALLOWED_ARGS=/nxaw /openfile
exit /b

:set_default_values
set NXCUSTOM_APPLICATION_VERSION=
set NXCUSTOM_APPLICATION_NAME=NX
set NXCUSTOM_PACKAGE_NAME=NX
set NXCUSTOM_LIBNAME=
set NXCUSTOM_GROUP=
set UGII_ROUTING_KIT_UNITS=METRIC
set NXCUSTOM_SESSIONS=SINGLE
set NXCUSTOM_TEAMCENTER_ACTIVE=FALSE
set START_DIR=%HOMEDRIVE%%HOMEPATH%
set NXCUSTOM_PACKAGE_TITLE=
set NXCUSTOM_TITLE=
set NXCUSTOM_TEAMCENTER_ENV=
set NXCUSTOM_PASSED_ARGUMENTS=
set NXCUSTOM_MANAGED_CUSTOMER_DEFAULTS=FALSE
set NXCUSTOM_USER_SETTINGS_LOCATION=1
set NXCUSTOM_VERSION_IN_TITLE=FALSE
set NXCUSTOM_LIBNAME_IN_TITLE=FALSE
set NXCUSTOM_LOAD_OPTIONS_IN_USER_DIR=FALSE
set NXCUSTOM_REPORT_VARS=TRUE
set NXCUSTOM_LOG_FILE=%TEMP%\NXcustom_%USERNAME%.log
set NXCUSTOM_USER_OVERRIDE_ARGS=/version /application /package /libname /group /units /sessions /managed /workdir /title /saltlic /licserver /cdlmdlic /licbundle /tcenv /passargs
exit /b

:clean_vars
set NXCUSTOM_APPLICATION_NAME_UPPER=
set NXCUSTOM_PACKAGE_NAME_UPPER=
set UGII_ROUTING_KIT_UNITS_UPPER=
set NXCUSTOM_NX_PATHS=
set NXCUSTOM_NX_DOT_VERSION=
set NXCUSTOM_VALID_START_CONF_VARS=
set NXCUSTOM_VALID_LIB_CONF_VARS=
set NXCUSTOM_VALID_TC_CONF_VARS=
set NXCUSTOM_VALID_APPLICATION_NAME=
set NXCUSTOM_VALID_PACKAGE_NAME=
set NXCUSTOM_VALID_PACKAGE_NAME_NX=
set NXCUSTOM_VALID_PACKAGE_NAME_S3D=
set NXCUSTOM_VALID_NX_VERSIONS=
set NXCUSTOM_VALID_S3D_VERSIONS=
set NXCUSTOM_VALID_ROUTING_UNITS=
set NXCUSTOM_VALID_SESSIONS=
set NXCUSTOM_VALID_PACKAGE_TITLE=
set NXCUSTOM_VALID_TEAMCENTER_ACTIVE=
set NXCUSTOM_VALID_START_ARGUMENTS=
set NXCUSTOM_AUTO_S3D_VERSION=
set NXCUSTOM_PACKAGE_TITLE=
set NXCUSTOM_INSTALLED_S3D_VERSIONS=
set NXCUSTOM_LIBRARY_VERSIONS=
set NXCUSTOM_LOAD_OPTIONS_IN_USER_DIR=
set NXCUSTOM_MANAGED_CUSTOMER_DEFAULTS=
set NXCUSTOM_START_ARGUMENTS=
set NXCUSTOM_TITLE_VERSION=
set NXCUSTOM_USER_OVERRIDE_ARGS=
set NXCUSTOM_USER_SETTINGS_LOCATION=
set NXCUSTOM_VALID_GROUPS=
set NXCUSTOM_VERSION_IN_TITLE=
set NXCUSTOM_LIBNAME_IN_TITLE=
set NXCUSTOM_ALWAYS_ALLOWED_ARGS=
set NXCUSTOM_NAMED_LIBRARIES=
set NXCUSTOM_START_FROM_AW_OR_RAC=
set NXCUSTOM_START_SCRIPT=
set NXCUSTOM_NXTCXML_FILE=
set NXCUSTOM_PART_FILE=
set NXCUSTOM_TEAMCENTER_ENV=
set NXCUSTOM_ARG_VAR_BUFFER=
set NXCUSTOM_USING_NX_PATHS_CONF=
set NXCUSTOM_USING_START_CONF=
set NXCUSTOM_USING_LIB_CONF=
set NXCUSTOM_USING_TC_CONF=
set NXCUSTOM_USING_CONF=
set NXCUSTOM_START_ARGS_ESCAPED=
exit /b

:set_locations
set NXCUSTOM_START_SCRIPT=%~dpnx0
if "%NXCUSTOM_START_SCRIPT:~0,2%" == "\\" (
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "NXcustom is being used from a UNC path."
	call :report new_line
	call :report "If you can access this location from a mapped drive,"
	call :report "please do so."
	call :report new_line
	call :report "If you currently have no way to access this location"
	call :report "from a mapped drive, create a mapped drive."
	call :report "Ideally, this would be done via group policy within"
	call :report "the Active Directory domain to ensure consistent paths"
	call :report "for all users of this NXcustom environment."
	call :red_exit
)
cd /d %~dp0
set NXCUSTOM_START_DIR=%cd%
for %%a in ("%NXCUSTOM_START_DIR%") do (
	call set NXCUSTOM_DIR=%%NXCUSTOM_START_DIR:\%%~nxa=%%
)
set NXCUSTOM_CONFIG_DIR=%NXCUSTOM_DIR%\Configuration
exit /b

:set_valid_application_versions
set NXCUSTOM_VALID_NX_VERSIONS=
set NXCUSTOM_VALID_S3D_VERSIONS=
set NXCUSTOM_AUTO_S3D_VERSION=
setlocal EnableDelayedExpansion
for %%a in (%NXCUSTOM_LIBRARY_VERSIONS%) do (
	for %%b in (%NXCUSTOM_NX_PATHS%) do (
		for /f "tokens=1,2,* delims=:" %%c in (%%b) do (
			if "%%a" == "%%c" (
				if defined NXCUSTOM_VALID_NX_VERSIONS (
					if "!NXCUSTOM_VALID_NX_VERSIONS!" == "!NXCUSTOM_VALID_NX_VERSIONS:%%a=!" (
						set NXCUSTOM_VALID_NX_VERSIONS=!NXCUSTOM_VALID_NX_VERSIONS! %%a
					)
				) else (
					set NXCUSTOM_VALID_NX_VERSIONS=%%a
				)
			)
		)
	)
	for %%b in (%NXCUSTOM_INSTALLED_S3D_VERSIONS%) do (
		if "%%a" == "%%b" (
			if not defined NXCUSTOM_VALID_S3D_VERSIONS (
				set NXCUSTOM_VALID_S3D_VERSIONS=%%a
			) else (
				set NXCUSTOM_VALID_S3D_VERSIONS=!NXCUSTOM_VALID_S3D_VERSIONS! %%a
			)
		)
	)
)
for %%a in (%NXCUSTOM_VALID_S3D_VERSIONS%) do (
	if "%%a" geq "!NXCUSTOM_AUTO_S3D_VERSION!" (
		set NXCUSTOM_AUTO_S3D_VERSION=%%a
	)
)
endlocal & (
	set NXCUSTOM_VALID_NX_VERSIONS=%NXCUSTOM_VALID_NX_VERSIONS%
	set NXCUSTOM_VALID_S3D_VERSIONS=%NXCUSTOM_VALID_S3D_VERSIONS%
	set NXCUSTOM_AUTO_S3D_VERSION=%NXCUSTOM_AUTO_S3D_VERSION%
)
exit /b

:parse_and_eval_conf
set arg=%1
setlocal EnableDelayedExpansion
if "%arg%" == "START" (
	set NXCUSTOM_START_CONF=%NXCUSTOM_CONFIG_DIR%\NXstart.conf
	set NXCUSTOM_CONF=!NXCUSTOM_START_CONF!
) else if "%arg%" == "LIB" (
	set NXCUSTOM_LIB_CONF=%NXCUSTOM_LIB%\NXlibrary.conf
	set NXCUSTOM_CONF=!NXCUSTOM_LIB_CONF!
) else if "%arg%" == "TC" (
	if defined NXCUSTOM_TEAMCENTER_ENV (
		set NXCUSTOM_TC_CONF=%NXCUSTOM_CONFIG_DIR%\TCenv_%NXCUSTOM_TEAMCENTER_ENV%.conf
		set NXCUSTOM_CONF=!NXCUSTOM_TC_CONF!
	) else (
		exit /b
	)
) else (
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "Empty or invalid argument passed to parse_conf function!"
	call :report new_line
	call :red_exit
)
endlocal & (
	set NXCUSTOM_START_CONF=%NXCUSTOM_START_CONF%
	set NXCUSTOM_LIB_CONF=%NXCUSTOM_LIB_CONF%
	set NXCUSTOM_TC_CONF=%NXCUSTOM_TC_CONF%
	set NXCUSTOM_CONF=%NXCUSTOM_CONF%
)
call set valid_vars=%%NXCUSTOM_VALID_%arg%_CONF_VARS%%
set NXCUSTOM_CONF_BAT=%TEMP%\NXcustom_%RANDOM%%RANDOM%_conf.bat
type nul > %NXCUSTOM_CONF_BAT%
setlocal EnableDelayedExpansion
if exist "%NXCUSTOM_CONF%" (
	set NXCUSTOM_USING_%arg%_CONF=true
	for /f "usebackq tokens=*" %%a in ("%NXCUSTOM_CONF%") do (
		set __a=%%a
		for /f "tokens=1 delims==" %%b in ("!__a!") do (set __b=%%b)
		if "!__a!" neq "" if "!__a:~0,2!" neq "//" (
			set valid=false
			for %%c in (%valid_vars%) do (
				if "!__b!" == "%%c" (set valid=true)
			)		
			if "!valid!" == "true" (
				set __a=!__a:${=%%!
				set __a=!__a:}=%%!
				echo set "!__a!">>%NXCUSTOM_CONF_BAT%
			) else (
				if not defined bad_conf_line (
					set bad_conf_line=true
					set NXCUSTOM_REPORT_VARS=TRUE
					call :report "The configuration file:"
					call :report "%NXCUSTOM_CONF%"
					call :report new_line
					call :report "Contains the following invalid lines:"
				)
				call :report "!__a!"
			)
		)
	)
	if defined bad_conf_line (
		call :report new_line
		call :report "This is either a typo, or you are trying to set a variable"
		call :report "which is not allowed to be set in this configuration file."
		call :report new_line
		call :report "Valid variables to set in this file are:"
		for %%a in (%valid_vars%) do (
			call :report "%%a"
		)
		call :report new_line
		call :red_exit
	)
) else if "%arg%" == "TC" (
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "Teamcenter environment configuration '%NXCUSTOM_TEAMCENTER_ENV%' is specified, but"
	call :report "%NXCUSTOM_CONF%"
	call :report "does not exist."
	call :report new_line
	call :red_exit
)
endlocal & (
	set NXCUSTOM_USING_START_CONF=%NXCUSTOM_USING_START_CONF%
	set NXCUSTOM_USING_LIB_CONF=%NXCUSTOM_USING_LIB_CONF%
	set NXCUSTOM_USING_TC_CONF=%NXCUSTOM_USING_TC_CONF%
)
if defined NXCUSTOM_USING_%arg%_CONF (
	call %NXCUSTOM_CONF_BAT%
	del %NXCUSTOM_CONF_BAT%
)
set arg=
set valid_vars=
set NXCUSTOM_CONF=
set NXCUSTOM_CONF_BAT=
exit /b

:clear_log
type nul > "%NXCUSTOM_LOG_FILE%"
exit /b

:report
set value=%*
set value=%value:"=%
if "%value%" == "new_line" (
	if "%NXCUSTOM_REPORT_VARS%" == "TRUE" (echo:)
	echo:>>"%NXCUSTOM_LOG_FILE%"
) else (
	if "%NXCUSTOM_REPORT_VARS%" == "TRUE" (echo %value%)
	echo %value%>>"%NXCUSTOM_LOG_FILE%"
)
set value=
exit /b

:parse_args
set NXCUSTOM_ARG_VAR_BUFFER=
set tmp_NXCUSTOM_VALID_START_ARGUMENTS=%NXCUSTOM_VALID_START_ARGUMENTS%
call :set_parse_args %NXCUSTOM_START_ARGUMENTS%
if "%NXCUSTOM_ARGS_TO_PARSE%" == "" (goto :end_parse_var_args)
:start_parse_var_args
call :parse_arg
if "%continue%" == "true" (goto :start_parse_var_args)
:end_parse_var_args
set NXCUSTOM_ARGS_TO_PARSE=%*
if "%NXCUSTOM_ARGS_TO_PARSE:~0,6%" == "/nxrac" (
	set NXCUSTOM_ARGS_FROM_RAC=%NXCUSTOM_START_ARGS_ESCAPED:~7%
	set NXCUSTOM_ARGS_TO_PARSE=
	goto :end_parse_args
)
call :set_parse_args %*
if "%NXCUSTOM_ARGS_TO_PARSE%" == "" (goto :end_parse_args)
if "%NXCUSTOM_ARGS_TO_PARSE%" == "/h" (
	call :echo_help
	pause
	exit /b
)
set NXCUSTOM_VALID_START_ARGUMENTS=%tmp_NXCUSTOM_VALID_START_ARGUMENTS%
:start_parse_args
call :parse_arg
if "%continue%" == "true" (goto :start_parse_args)
:end_parse_args
set tmp_NXCUSTOM_VALID_START_ARGUMENTS=
if defined NXCUSTOM_ARGS_TO_PARSE (
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "The following arguments could not be evaluated:"
	call :report new_line
	call :report "%NXCUSTOM_ARGS_TO_PARSE:''="%"
	call :report new_line
	call :report "If you intended to pass these arguments to"
	call :report "the application being started, use the /passargs"
	call :report "switch followed by the arguments you wish to pass."
	call :red_exit
)
exit /b

:set_parse_args
setlocal EnableDelayedExpansion
set __tmp=%*
set NXCUSTOM_ARGS_TO_PARSE=%*
set NXCUSTOM_ARGS_TO_PARSE=!NXCUSTOM_ARGS_TO_PARSE:(=#ASCII40!
set NXCUSTOM_ARGS_TO_PARSE=!NXCUSTOM_ARGS_TO_PARSE:)=#ASCII41!
set NXCUSTOM_ARGS_TO_PARSE=!NXCUSTOM_ARGS_TO_PARSE:"=''!
if "!__tmp!" == "" (
	set NXCUSTOM_ARGS_TO_PARSE=
)
endlocal & (
	set NXCUSTOM_ARGS_TO_PARSE=%NXCUSTOM_ARGS_TO_PARSE%
)
exit /b

:parse_arg
set continue=
setlocal EnableDelayedExpansion
set arg_switch=
set arg_variable=
for /f "tokens=1" %%a in ("%NXCUSTOM_ARGS_TO_PARSE%") do (
	set passed_switch=%%a
)
if "!passed_switch!" == "n/a" (
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "Argument switch !passed_switch! is invalid!"
	call :red_exit
)
for %%a in (%NXCUSTOM_VALID_START_ARGUMENTS%) do (
	for /f "tokens=1,2,3 delims=-" %%b in ("%%a") do (
		if "!passed_switch!" == "%%b" (
			set replace=%%a
			set arg_switch=%%b
			set arg_switch_short=%%c
			set arg_variable=%%d
		) else if "!passed_switch!" == "%%c" (
			set replace=%%a
			set arg_switch=%%b
			set arg_switch_short=%%c
			set arg_variable=%%d
		)
	)
)
if not defined arg_switch (
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "Argument switch !passed_switch! is invalid!"
	call :red_exit
)
call set NXCUSTOM_VALID_START_ARGUMENTS=%%NXCUSTOM_VALID_START_ARGUMENTS:!replace!=%%
set NXCUSTOM_VALID_START_ARGUMENTS=!NXCUSTOM_VALID_START_ARGUMENTS:  = !
if "!NXCUSTOM_VALID_START_ARGUMENTS:~0,1!" == " " (call set NXCUSTOM_VALID_START_ARGUMENTS=!NXCUSTOM_VALID_START_ARGUMENTS:~1!)
if "!NXCUSTOM_VALID_START_ARGUMENTS:~-1!" == " " (call set NXCUSTOM_VALID_START_ARGUMENTS=!NXCUSTOM_VALID_START_ARGUMENTS:~0,-1!)
set match=false
for %%a in (%NXCUSTOM_USER_OVERRIDE_ARGS%) do (
	if "%%a" == "!arg_switch!" (set match=true)
)
for %%a in (%NXCUSTOM_ALWAYS_ALLOWED_ARGS%) do (
	if "%%a" == "!arg_switch!" (set match=true)
)
if "!match!" == "false" (
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "Argument switch !passed_switch! not allowed because"
	call :report "!arg_switch! is not specified in NXCUSTOM_USER_OVERRIDE_ARGS."
	call :report "Contact your NX administrator for help."
	call :red_exit
)
set replace=
for /f "tokens=1,*" %%a in ("%NXCUSTOM_ARGS_TO_PARSE%") do (
	set __b=%%b
	if "!arg_switch!" neq "/passargs" (
		if "!__b:~0,1!" == "'" (
			if "!__b:~1,1!" == "'" (
				set __q=''
				for /f "delims=''" %%c in ("!__b!") do (set __b=%%c)
			) else (	
				set __q='
				for /f "delims='" %%c in ("!__b!") do (set __b=%%c)
			)
		) else (
			for /f %%c in ("!__b!") do (set __b=%%c)
		)
	)
	set var_value=!__b!
	if defined __q (set __b=!__q!!__b!!__q!)
	if "%NXCUSTOM_ARGS_TO_PARSE%" == "!passed_switch! !__b!" (
		set "replace=!passed_switch! !__b!"
	) else (
		set "replace=!passed_switch! !__b! "
	)
	set __b=
	set __q=
	if "!arg_variable!" == "NXCUSTOM_PASSED_ARGUMENTS" (
		set var_value=!var_value:''="!
	)
)
endlocal & (
	set NXCUSTOM_ARG_VAR_BUFFER=%NXCUSTOM_ARG_VAR_BUFFER% "%arg_variable%=%var_value%"
	set "replace=%replace%"
)
if "%replace%" neq "" (call set NXCUSTOM_ARGS_TO_PARSE=%%NXCUSTOM_ARGS_TO_PARSE:%replace%=%%)
if "%NXCUSTOM_ARGS_TO_PARSE%" neq "" (set continue=true)
set replace=
exit /b

:eval_arg_vars
for %%a in (%NXCUSTOM_ARG_VAR_BUFFER%) do (
	set %%a
)
exit /b

:set_UGII_BASE_DIR
set UGII_BASE_DIR=
if /i "%NXCUSTOM_APPLICATION_NAME%" == "S3D" (
	for /f "usebackq tokens=1,2,*" %%a in (`reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Siemens\Simcenter 3D %NXCUSTOM_APPLICATION_VERSION%" 2^> nul`) do (
		if "%%a" == "UGII_BASE_DIR" (set UGII_BASE_DIR=%%c)
	)
	if not defined UGII_BASE_DIR (
		for /f "usebackq tokens=1,2,*" %%a in (`reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Siemens\Simcenter 3D %NXCUSTOM_APPLICATION_VERSION%" 2^> nul`) do (
			if "%%a" == "INSTALLDIR" (set UGII_BASE_DIR=%%c)
		)
	)
	if not defined UGII_BASE_DIR (
		set NXCUSTOM_REPORT_VARS=TRUE
		call :report "No UGII_BASE_DIR key for Simcenter 3D found in registry!"
		call :red_exit
	)
) else (
	call :get_path_from_dot %NXCUSTOM_NX_DOT_VERSION% UGII_BASE_DIR
)
if not defined UGII_BASE_DIR (
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "UGII_BASE_DIR not set!"
	call :red_exit
)
if not exist "%UGII_BASE_DIR%\NXBIN\" (
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "UGII_BASE_DIR set to invalid value!"
	call :red_exit
)
exit /b

:validate_TC_ROOT
if defined TC_ROOT if not exist "%TC_ROOT%" (
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "TC_ROOT set to invalid value!"
	call :red_exit
)
exit /b

:validate_START_DIR
set valid=false
set __dir=%1
set __dir=%__dir:"=%
if exist "%__dir%" (
	(> "%__dir%\NXcustom_write_access.check" echo) 2>NUL && (
		del "%__dir%\NXcustom_write_access.check" && (
			set valid=true
			set START_DIR=%__dir%
		)
	)
)
setlocal EnableDelayedExpansion
if "%valid%" == "false" (
	set __a=%NXCUSTOM_REPORT_VARS%
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "The START_DIR value '%__dir%' does not exist or is not writable!"
	call :report "Falling back to next available option..."
	call :yellow_pause
	call :black_continue
	set NXCUSTOM_REPORT_VARS=!__a!
	set __a=
)
endlocal & (
	set NXCUSTOM_REPORT_VARS=%NXCUSTOM_REPORT_VARS%
)
set __dir=
exit /b

:validate_NXCUSTOM_USER_OVERRIDE_ARGS
set abort=false
setlocal EnableDelayedExpansion
for %%a in (%NXCUSTOM_USER_OVERRIDE_ARGS%) do (
	set match=false	
	for %%b in (%NXCUSTOM_VALID_START_ARGUMENTS%) do (	
		for /f "tokens=1,* delims=-" %%c in ("%%b") do (
			if "%%a" == "%%c" (
				set match=true
			)
		)
	)
	set __a=%%a
	if "!match!" == "false" (
		set abort=true
		set NXCUSTOM_REPORT_VARS=TRUE
		call :report "!__a! is not a valid argument switch to specify in NXCUSTOM_USER_OVERRIDE_ARGS"
	)
)
endlocal & (
	set abort=%abort%
	set NXCUSTOM_REPORT_VARS=%NXCUSTOM_REPORT_VARS%
)
if "%abort%" == "true" (call :red_exit)
set abort=
exit /b

:validate_NXCUSTOM_APPLICATION_VERSION
setlocal EnableDelayedExpansion
set valid=false
if /i "%NXCUSTOM_APPLICATION_NAME%" == "S3D" (
	if not defined NXCUSTOM_APPLICATION_VERSION (
		set NXCUSTOM_APPLICATION_VERSION=%NXCUSTOM_AUTO_S3D_VERSION%
	)
	for %%a in (%NXCUSTOM_VALID_S3D_VERSIONS%) do (
		if "!NXCUSTOM_APPLICATION_VERSION!" == "%%a" (set valid=true)
	)
) else (
	if defined NXCUSTOM_APPLICATION_VERSION (
		echo !NXCUSTOM_APPLICATION_VERSION! | findstr "\<[0-9][0-9][0-9][0-9]\.[0-9][0-9][0-9][0-9]\>">nul && (
			set NXCUSTOM_NX_DOT_VERSION=!NXCUSTOM_APPLICATION_VERSION!
			call :get_compat_from_dot !NXCUSTOM_NX_DOT_VERSION! NXCUSTOM_APPLICATION_VERSION
		) || echo !NXCUSTOM_APPLICATION_VERSION! | findstr "\<[0-9][0-9][0-9][0-9]\>">nul && (
			call :get_highest_dot_from_compat !NXCUSTOM_APPLICATION_VERSION! NXCUSTOM_NX_DOT_VERSION
		)
		for %%a in (%NXCUSTOM_VALID_NX_VERSIONS%) do (
			if "!NXCUSTOM_APPLICATION_VERSION!" == "%%a" (set valid=true)
		)
	) else (
		call :get_highest_valid_nx_compat NXCUSTOM_APPLICATION_VERSION
		call :get_highest_dot_from_compat !NXCUSTOM_APPLICATION_VERSION! NXCUSTOM_NX_DOT_VERSION
		set valid=true
	)
)
endlocal & (
	set NXCUSTOM_APPLICATION_VERSION=%NXCUSTOM_APPLICATION_VERSION%
	set NXCUSTOM_NX_DOT_VERSION=%NXCUSTOM_NX_DOT_VERSION%
	set valid=%valid%
)
if %NXCUSTOM_APPLICATION_VERSION% lss 1899 (
	set abort=true
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "The NXCUSTOM_APPLICATION_VERSION value '%NXCUSTOM_APPLICATION_VERSION%' is not valid"
	call :report "NXcustom supports version 1899 and newer"
	call :report new_line
) else if "%valid%" == "false" (
	set abort=true
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "The NXCUSTOM_APPLICATION_VERSION value '%NXCUSTOM_APPLICATION_VERSION%' is not valid"
	if defined NXCUSTOM_VALID_NX_VERSIONS (
		call :report "Valid values for NX are the following: %NXCUSTOM_VALID_NX_VERSIONS%"
	)
	if defined NXCUSTOM_VALID_S3D_VERSIONS (
		call :report "Valid values for Simcenter 3D are the following: %NXCUSTOM_VALID_S3D_VERSIONS%"
	)
	call :report new_line
	call :report "Valid versions are those which are installed AND have"
	call :report "a version-specific library folder inside of NXcustom"
	call :report new_line
)
set valid=
exit /b

:validate_UGII_ROUTING_KIT_UNITS
set valid=false
for %%a in (%NXCUSTOM_VALID_ROUTING_UNITS%) do (
	if /i "%UGII_ROUTING_KIT_UNITS%" == "%%a" (set valid=true)
)
if "%valid%" == "false" (
	set abort=true
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "The UGII_ROUTING_KIT_UNITS value '%UGII_ROUTING_KIT_UNITS%' is not valid"
	call :report "Valid values are the following: %NXCUSTOM_VALID_ROUTING_UNITS%"
	call :report new_line
)
set valid=
exit /b

:validate_NXCUSTOM_LIBNAME
set valid=false
setlocal EnableDelayedExpansion
if defined NXCUSTOM_LIBNAME (
	for %%a in (!NXCUSTOM_NAMED_LIBRARIES!) do (
		for /f "tokens=1,2 delims=-" %%b in ("%%a") do (
			if "!NXCUSTOM_APPLICATION_VERSION!" == "%%b" if "!NXCUSTOM_LIBNAME!" == "%%c" (
				set valid=true
			)
		)
	)
	if "!valid!" == "false" (
		set abort=true
		set NXCUSTOM_REPORT_VARS=TRUE
		call :report "The NXCUSTOM_LIBNAME value '!NXCUSTOM_LIBNAME!' is not valid"
		call :report new_line
	)
)
endlocal & (
	set abort=%abort%
	set NXCUSTOM_REPORT_VARS=%NXCUSTOM_REPORT_VARS%
)
set valid=
exit /b

:validate_MKE_VERSION
if /i "%NXCUSTOM_APPLICATION_NAME%" == "MKE" if "%NXCUSTOM_APPLICATION_VERSION%" GEQ "2306" (
	set abort=true
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "MKE editor is not available in versions 2306 and newer."
	call :report "MKE editor has been replaced by FBM Configurator."
	call :report "See documentation for details."
	call :report new_line
)
exit /b

:validate_NXCUSTOM_NXTCXML_FILE
setlocal EnableDelayedExpansion
set __new_name=NXcustom_openinnx.nxtcxml
set NXCUSTOM_NXTCXML_FILE=!NXCUSTOM_NXTCXML_FILE:#ASCII40=^(!
set NXCUSTOM_NXTCXML_FILE=!NXCUSTOM_NXTCXML_FILE:#ASCII41=^)!
for %%a in ("!NXCUSTOM_NXTCXML_FILE!") do (
	set __dir=%%~dpa
)
if exist "!NXCUSTOM_NXTCXML_FILE!" (
	if exist "!__dir!!__new_name!" (del "!__dir!!__new_name!")
	ren "!NXCUSTOM_NXTCXML_FILE!" !__new_name!
	set NXCUSTOM_NXTCXML_FILE=!__dir!!__new_name!
) else (
	set abort=true
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "NXCUSTOM_NXTCXML_FILE path does not exist!"
	call :report new_line
)
endlocal & (
	set NXCUSTOM_NXTCXML_FILE=%NXCUSTOM_NXTCXML_FILE%
	set abort=%abort%
	set NXCUSTOM_REPORT_VARS=%NXCUSTOM_REPORT_VARS%
)
exit /b

:validate_NXCUSTOM_PART_FILE
setlocal EnableDelayedExpansion
set file=!NXCUSTOM_PART_FILE:#ASCII40=^(!
set file=!file:#ASCII41=^)!
if not exist "!file!" (
	set abort=true
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "NXCUSTOM_PART_FILE path does not exist!"
	call :report new_line
)
endlocal & (
	set abort=%abort%
	set NXCUSTOM_REPORT_VARS=%NXCUSTOM_REPORT_VARS%
)
exit /b

:set_nx_paths
set NXCUSTOM_NX_PATHS=
setlocal EnableDelayedExpansion
for /f "usebackq tokens=* delims=" %%a in (`reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Siemens" 2^> nul`) do (
	set __a=%%~na
	if "!__a:~0,3!" == "NX " (
		for /f "usebackq tokens=1,2,*" %%b in (`reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Siemens\!__a!" 2^> nul`) do (
			if "%%b" == "UGII_BASE_DIR" (
				if "%%d" neq "" (
					set __p=%%d
				)
			)
			if not defined __p if "%%b" == "INSTALLDIR" (
				set __p=%%d
			)
		)
		if defined __p (
			if exist "!__p!\NXBIN\env_print.exe" (
				for /f "usebackq" %%b in (`"!__p!\NXBIN\env_print" NX_COMPATIBLE_BASE_RELEASE_VERSION`) do (
					set __c=%%b
				)
				for /f "usebackq tokens=1,2" %%b in (`"!__p!\NXBIN\env_print" -n`) do (
					set __d=%%c
					set NXCUSTOM_NX_PATHS=!NXCUSTOM_NX_PATHS! "!__c!:!__d!:!__p!"
				)
			)
		)
	)
	if "!__a:~0,13!" == "Designcenter " (
		for /f "usebackq tokens=1,2,*" %%b in (`reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Siemens\!__a!" 2^> nul`) do (
			if "%%b" == "UGII_BASE_DIR" (
				if "%%d" neq "" (
					set __p=%%d
				)
			)
			if not defined __p if "%%b" == "INSTALLDIR" (
				set __p=%%d
			)
		)
		if defined __p (
			if exist "!__p!\NXBIN\env_print.exe" (
				for /f "usebackq" %%b in (`"!__p!\NXBIN\env_print" NX_COMPATIBLE_BASE_RELEASE_VERSION`) do (
					set __c=%%b
				)
				for /f "usebackq tokens=1,2" %%b in (`"!__p!\NXBIN\env_print" -n`) do (
					set __d=%%c
					set NXCUSTOM_NX_PATHS=!NXCUSTOM_NX_PATHS! "!__c!:!__d!:!__p!"
				)
			)
		)
	)
)
if exist "%NXCUSTOM_CONFIG_DIR%\NX_paths.conf" (
	set NXCUSTOM_NX_PATHS_CONF=%NXCUSTOM_CONFIG_DIR%\NX_paths.conf
	set NXCUSTOM_USING_NX_PATHS_CONF=true
	for /f "usebackq tokens=*" %%a in ("!NXCUSTOM_NX_PATHS_CONF!") do (
		set __p=%%a
		if "!__p:~0,2!" neq "//" (
			if exist "!__p!\NXBIN\env_print.exe" (
				for /f "usebackq" %%b in (`"!__p!\NXBIN\env_print" NX_COMPATIBLE_BASE_RELEASE_VERSION`) do (
					set __c=%%b
				)
				for /f "usebackq tokens=1,2" %%b in (`"!__p!\NXBIN\env_print" -n`) do (
					set __d=%%c
					set NXCUSTOM_NX_PATHS=!NXCUSTOM_NX_PATHS! "!__c!:!__d!:!__p!"
				)
			) else (
				set bad_paths=!bad_paths! "!__p!"
			)
		)
	)
	if defined bad_paths (
		call :report "The following paths in NX_paths.conf are not valid:"
		call :report new_line
		for %%a in (!bad_paths!) do (
			call :report "%%a"
		)
		call :report new_line
		call :red_exit
	)
)
endlocal & (
	set NXCUSTOM_NX_PATHS_CONF=%NXCUSTOM_NX_PATHS_CONF%
	set NXCUSTOM_USING_NX_PATHS_CONF=%NXCUSTOM_USING_NX_PATHS_CONF%
	set NXCUSTOM_NX_PATHS=%NXCUSTOM_NX_PATHS%
)
exit /b

:get_highest_valid_nx_compat
setlocal EnableDelayedExpansion
set highest=0
set var=%1
for %%a in (%NXCUSTOM_VALID_NX_VERSIONS%) do (
	if %%a gtr !highest! (
		set highest=%%a
	)
)
endlocal & (
	set %var%=%highest%
)
exit /b

:get_highest_compat
setlocal EnableDelayedExpansion
set highest=0
set var=%1
for %%a in (%NXCUSTOM_NX_PATHS%) do (
	for /f "tokens=1,2,* delims=:" %%b in (%%a) do (
		if %%b gtr !highest! (
			set highest=%%b
		)
	)
)
endlocal & (
	set %var%=%highest%
)
exit /b

:get_highest_dot_from_compat
setlocal EnableDelayedExpansion
set compat=%1
set var=%2
set highest=0
set highestdot=
for %%a in (%NXCUSTOM_NX_PATHS%) do (
	for /f "tokens=1,2,* delims=:" %%b in (%%a) do (
		set __c=%%c
		set __c=!__c:.=!
		if "%%b" == "!compat!" if !__c! gtr !highest! (
			set highest=!__c!
			set highestdot=%%c
		)
	)
)
endlocal & (
	set %var%=%highestdot%
)
exit /b

:get_compat_from_dot
setlocal EnableDelayedExpansion
set dot=%1
set var=%2
for %%a in (%NXCUSTOM_NX_PATHS%) do (
	for /f "tokens=1,2,* delims=:" %%b in (%%a) do (
		if "%%c" == "!dot!" (
			set compat=%%b
		)
	)
)
endlocal & (
	set %var%=%compat%
)
exit /b

:get_path_from_dot
setlocal EnableDelayedExpansion
set dot=%1
set var=%2
for %%a in (%NXCUSTOM_NX_PATHS%) do (
	for /f "tokens=1,2,* delims=:" %%b in (%%a) do (
		if "%%c" == "!dot!" (
			set dot_path=%%d
		)
	)
)
endlocal & (
	set %var%=%dot_path%
)
exit /b

:check_tcin_vars_set
setlocal EnableDelayedExpansion
if not defined JAVA_HOME (
	set message=!message!,JAVA_HOME is not set.
)
if not defined FMS_HOME (
	set message=!message!,FMS_HOME is not set.
)
if not defined UGII_TCCS_ENV_NAME (
	if defined NTIER_ARG (
		if "%NTIER_ARG%" == "2-tier" (
			if not defined TC_ROOT (
				set message=!message!,TC_ROOT is not set and is required when
				set message=!message!,NTIER_ARG is 2-tier and UGII_TCCS_ENV_NAME is not set.
			)
			if not defined TC_DATA (
				set message=!message!,TC_DATA is not set and is required when
				set message=!message!,NTIER_ARG is 2-tier and UGII_TCCS_ENV_NAME is not set.
			)
		) else if "%NTIER_ARG%" == "4-tier" (
			if not defined UGII_UGMGR_COMMUNICATION (
				set message=!message!,UGII_UGMGR_COMMUNICATION is not set and is required when
				set message=!message!,NTIER_ARG is 4-tier and UGII_TCCS_ENV_NAME is not set.
			)
			if not defined UGII_UGMGR_HTTP_URL (
				set message=!message!,UGII_UGMGR_HTTP_URL is not set and is required when
				set message=!message!,NTIER_ARG is 4-tier and UGII_TCCS_ENV_NAME is not set.
			)
		) else (
			set message=!message!,NTIER_ARG is invalid.
		)
	) else (
		if defined TC_ROOT (set flag=!flag!1) else (set flag=!flag!0)
		if defined TC_DATA (set flag=!flag!1) else (set flag=!flag!0)
		if defined UGII_UGMGR_COMMUNICATION (set flag=!flag!1) else (set flag=!flag!0)
		if defined UGII_UGMGR_HTTP_URL (set flag=!flag!1) else (set flag=!flag!0)
		
		if "!flag:~0,2!" neq "11" if "!flag:~2,2!" neq "11" (
			set message=!message!,TC_ROOT and TC_DATA or
			set message=!message!,UGII_UGMGR_COMMUNICATION and UGII_UGMGR_HTTP_URL
			set message=!message!,must be set when UGII_TCCS_ENV_NAME is not set.
		)
	)
)
if defined message (
	set NXCUSTOM_REPORT_VARS=TRUE
	set message=!message: =#!
	set message=!message:,= !
	for %%a in (!message!) do (
		set __a=%%a
		call :report "!__a:#= !"
	)
	call :red_exit
)
endlocal
exit /b

:validate_NXCUSTOM_GROUP
set valid=false
if not exist "%NXCUSTOM_CUSTOMER_DEFAULTS_DIR%\Groups\" (
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "Cannot specify a group!
	call :report "The folder %NXCUSTOM_CUSTOMER_DEFAULTS_DIR%\Groups\ does not exist!"
	call :red_exit
)
for %%a in (%NXCUSTOM_VALID_GROUPS%) do (
	if "%NXCUSTOM_GROUP%" == "%%a" (set valid=true)
)
if "%valid%" == "false" (
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "The NXCUSTOM_GROUP value '%NXCUSTOM_GROUP%' is not valid"
	call :report "Valid values are the following: %NXCUSTOM_VALID_GROUPS%"
	call :report new_line
	call :report "Valid NXCUSTOM_GROUPs are those which have a folder in"
	call :report "%NXCUSTOM_CUSTOMER_DEFAULTS_DIR%\Groups"
	call :report new_line
	call :red_exit
)
set valid=
exit /b

:set_package_title
setlocal EnableDelayedExpansion
for %%a in (%NXCUSTOM_VALID_PACKAGE_TITLE%) do (
	set __a=%%a
	set __a=!__a:"=!
	for /f "tokens=1,2 delims=-" %%b in ("!__a!") do (
		if /i "%NXCUSTOM_PACKAGE_NAME%" == "%%b" (
			set __c=%%c
			if %NXCUSTOM_APPLICATION_VERSION% lss 2506 (
				set __c=!__c:PRODUCT_NAME=NX!
			) else (
				set __c=!__c:PRODUCT_NAME=Designcenter!			
			)
			set NXCUSTOM_PACKAGE_TITLE=!__c!
		)
	)
)
endlocal & (
	set NXCUSTOM_PACKAGE_TITLE=%NXCUSTOM_PACKAGE_TITLE%
)
exit /b

:set_user_profile_dir
set TMP_USER_DIR=%1
set TMP_USER_DIR=%TMP_USER_DIR:"=%
set UGII_USER_PROFILE_DIR=%2
set UGII_USER_PROFILE_DIR=%UGII_USER_PROFILE_DIR:"=%
if not exist "%UGII_USER_PROFILE_DIR%" (
	mkdir "%UGII_USER_PROFILE_DIR%"
	if not exist "%UGII_USER_PROFILE_DIR%" (
		set NXCUSTOM_REPORT_VARS=TRUE
		call :report "Could not create the '%UGII_USER_PROFILE_DIR%' folder"
		call :report "Check permissions or existence of %TMP_USER_DIR% folder"
		call :red_exit
	)
)
exit /b

:validate_variable
setlocal EnableDelayedExpansion
set var=%1
set validation_var=!var:NXCUSTOM_=NXCUSTOM_VALID_!
if not defined !validation_var! (
	set abort=true
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "!validation_var! is not set!"
	call :report "!var! cannot be validated!"
	call :red_exit
)
call set value=!%var%!
call set valid_values=!%validation_var%!
set valid=false
for %%a in (!valid_values!) do (
	if /i "!value!" == "%%a" (set valid=true)
)
if "!valid!" == "false" (
	set abort=true
	set NXCUSTOM_REPORT_VARS=TRUE
	call :report "The !var! value '!value!' is not valid"
	call :report "Valid values are the following: !valid_values!"
	call :report new_line
)
endlocal & (
	set abort=%abort%
	set NXCUSTOM_REPORT_VARS=%NXCUSTOM_REPORT_VARS%
)
exit /b

:echo_help
echo Example Use:
echo    NXstart /v 2312 /application NX /s MULTIPLE /workdir "C:\Users\Public\Desktop"
echo:
echo Description:
echo    This script sets up the custom environmnet for Siemens NX and related applications,
echo    then starts the specified or default application.
echo:
echo Parameter List:
echo    /v(ersion) [2206^|2212^|2306^|etc.]     Sets NXCUSTOM_APPLICATION_VERSION to specify version.
echo                                         Valid versions are those which are installed
echo                                         and have an NXlibrary in NXCUSTOM_DIR.
echo:
echo    /a(pplication) [NX^|MKE^|SE            Sets NXCUSTOM_APPLICATION_NAME to specify application to execute.
echo       ^|TC^|CMD^|NONE]
echo:
echo    /p(ackage) [NX^|VIEW^|NXCAM^|SECAM      Sets NXCUSTOM_PACKAGE_NAME to specify application package to use.
echo       ^|MECHATRONICS^|LAYOUT^|SIMCENTER3D
echo       ^|SIMVIEWER^|MOTION^|NX2DEDIT]
echo:
echo    /libname ^<NXCUSTOM_LIBNAME^>          Sets NXCUSTOM_LIBNAME to specify the named library to use.
echo                                         A named library for the NX version being launched must exist.
echo:
echo    /g(roup) ^<NXCUSTOM_GROUP^>            Sets NXCUSTOM_GROUP to specify group. A group folder with matching
echo                                         name must exist in the NXcustom library for the version being executed.
echo:
echo    /u(nits) [METRIC^|INCH]               Sets UGII_ROUTING_KIT_UNITS to specify units for ugs_router.
echo:
echo    /s(essions) [SINGLE^|MULTIPLE]        Sets NXCUSTOM_SESSIONS to specify amount of sessions a user may start.
echo:
echo    /m(anaged) [TRUE^|FALSE]              Sets NXCUSTOM_TEAMCENTER_ACTIVE to run NX in managed or native mode.
echo                                         When omitted the default is FALSE
echo:
echo    /w(orkdir) ^<start_directory^>         Sets START_DIR to specify where the application will start.
echo                                         Use single or double quotes to encapsulate a path containing spaces.
echo:
echo    /t(itle) ^<window_title^>              Sets NXCUSTOM_TITLE to specify NX window title bar suffix.
echo                                         Use single or double quotes to encapsulate a value containing spaces.
echo:
echo    /l(icserver) ^<license_server^>        Sets SPLM_LICENSE_SERVER to specify the license server to use.
echo                                         Use port^@hostname or port^@ipaddress.
echo:
echo    /h                                   Displays this help message.
echo:
exit /b

:to_upper
set var_to_read=%1
set var_to_read=%var_to_read:"=%
if "%2" == "" (set var_to_write=%1) else (set var_to_write=%2)
set var_to_write=%var_to_write:"=%
call set temp_var=%%%var_to_read%%%
for %%a in ("a=A" "b=B" "c=C" "d=D" "e=E" "f=F" "g=G" "h=H" "i=I" "j=J" "k=K" "l=L" "m=M" "n=N" "o=O" "p=P" "q=Q" "r=R" "s=S" "t=T" "u=U" "v=V" "w=W" "x=X" "y=Y" "z=Z") do (
	call set temp_var=%%temp_var:%%~a%%
)
set %var_to_write%=%temp_var%
set var_to_read=
set var_to_write=
set temp_var=
exit /b

:to_lower
set var_to_read=%1
set var_to_read=%var_to_read:"=%
if "%2" == "" (set var_to_write=%1) else (set var_to_write=%2)
set var_to_write=%var_to_write:"=%
call set temp_var=%%%var_to_read%%%
for %%a in ("A=a" "B=b" "C=c" "D=d" "E=e" "F=f" "G=g" "H=h" "I=i" "J=j" "K=k" "L=l" "M=m" "N=n" "O=o" "P=p" "Q=q" "R=r" "S=s" "T=t" "U=u" "V=v" "W=w" "X=x" "Y=y" "Z=z") do (
	call set temp_var=%%temp_var:%%~a%%
)
set %var_to_write%=%temp_var%
set var_to_read=
set var_to_write=
set temp_var=
exit /b

:black_continue
if "%NXCUSTOM_REPORT_VARS%" == "TRUE" (color 0f)
call :report new_line
exit /b

:green_success
if "%NXCUSTOM_REPORT_VARS%" == "TRUE" (color 2f)
call :report new_line
exit /b

:yellow_pause
if "%NXCUSTOM_REPORT_VARS%" == "TRUE" (color 6f)
call :report new_line
pause
exit /b

:red_exit
if "%NXCUSTOM_REPORT_VARS%" == "TRUE" (color 4f)
call :report new_line
pause
exit 1